# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    exclude:
    - '*'
  tags:
    include:
    - v*

variables:
  - name: oxiSourceDir
    value: $(Build.Repository.LocalPath)
  - name: oxiBuildDir
    value: $(Pipeline.Workspace)/build
  - name: oxiOutputName
    value: OXI-Desktop
  - name: qt
    value: 5.15.2

jobs:
- job:  Build_Deploy_Win_x64
  pool:
    vmImage: windows-2019

  container: 
    image: oxidocker.azurecr.io/oxiwinbuild:220
    endpoint: Docker Registry

  variables:
  - name: QT_ARCH_DIR
    value: C:/Qt/$(qt)/mingw81_64
  - name: QT_TOOLS_CXX_DIR
    value: C:/Qt/Tools/mingw810_64/bin

  steps:
  - checkout: self
    lfs: true
    submodules: recursive
    displayName: Checkout Repository Recursively

  - script: mkdir build
    workingDirectory: $(Pipeline.Workspace)
    displayName: Create build directory

  - script: dir /s
    workingDirectory: C:/Qt
    displayName: List Qt Directory on Windows

  - script: aqt list-tool windows desktop
    displayName: List Qt Tools

  - script: aqt list-tool windows desktop tools_mingw -l
    displayName: List details of mingw tool

  - script: >
      C:/Qt/Tools/CMake_64/bin/cmake.exe
      -S $(oxiSourceDir)
      -B $(oxiBuildDir)
      "-DCMAKE_GENERATOR:STRING=Ninja"
      "-DCMAKE_BUILD_TYPE:STRING=Release"
      "-DCMAKE_PROJECT_INCLUDE_BEFORE:FILEPATH=C:/Qt/Tools/QtCreator/share/qtcreator/package-manager/auto-setup.cmake"
      "-DQT_QMAKE_EXECUTABLE:STRING=$(QT_ARCH_DIR)/bin/qmake.exe"
      "-DCMAKE_PREFIX_PATH:STRING=$(QT_ARCH_DIR)"
      "-DCMAKE_C_COMPILER:STRING=$(QT_TOOLS_CXX_DIR)/gcc.exe"
      "-DCMAKE_CXX_COMPILER:STRING=$(QT_TOOLS_CXX_DIR)/g++.exe"
    displayName: Create CMake cache

  - script: C:/Qt/Tools/CMake_64/bin/cmake.exe --build $(oxiBuildDir) --target all
    displayName: Build

  - script: mkdir deploy
    workingDirectory: $(oxiBuildDir)/apps/oxi_desktop
    displayName: Create deploy directory

  - script: |
      cp ../*.exe .
      cp ../*.dll .
      ls .
      echo %PATH%
      $(QT_ARCH_DIR)/bin/windeployqt.exe --no-translations --compiler-runtime $(oxiOutputName).exe
    workingDirectory: $(oxiBuildDir)/apps/oxi_desktop/deploy
    displayName: Create windows deployable

  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(oxiBuildDir)/apps/oxi_desktop/deploy'
      includeRootFolder: false
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(oxiOutputName)_Win_x64.zip'
      replaceExistingArchive: true
    displayName: Copy archive to artifact staging directory

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: drop
      publishLocation: Container
    displayName: Publish artifact

- job:  Build_Deploy_MacOS
  pool:
    vmImage: macOS-10.15

  variables:
  - name: QT_ARCH_DIR
    value: /opt/qt/$(qt)/clang_64
  - name: QT_TOOLS_CXX_DIR
    value: /usr/bin

  steps:
  - checkout: self
    lfs: true
    submodules: recursive
    displayName: Checkout Repository Recursively

  - script: python3 -m pip install aqtinstall
    displayName: Pip Install aqtinstall

  - script: sudo aqt list-tool mac desktop
    displayName: List Qt Tools on MacOS

  - script: >
      sudo aqt install-qt --outputdir /opt/qt mac desktop $(qt) clang_64
      && sudo aqt install-tool --outputdir /opt/qt mac desktop tools_cmake
      && sudo aqt install-tool --outputdir /opt/qt mac desktop tools_ninja
      && sudo aqt install-tool --outputdir /opt/qt mac desktop tools_qtcreator
    displayName: Install Qt

  - script: mkdir build
    workingDirectory: $(Pipeline.Workspace)
    displayName: Create build directory

  - script: |
      echo '##vso[task.setvariable variable=path]$(PATH):/opt/qt/Tools/Ninja'
    displayName: Append Ninja to path

  - script: ls -R /opt/qt
    displayName: List Qt Directory on MacOS

  - script: >
      /opt/qt/Tools/CMake/CMake.app/Contents/bin/cmake
      -S $(oxiSourceDir)
      -B $(oxiBuildDir)
      -DCMAKE_GENERATOR:STRING=Ninja 
      -DCMAKE_BUILD_TYPE:STRING=Release 
      '-DCMAKE_PROJECT_INCLUDE_BEFORE:FILEPATH=/opt/qt/Qt Creator.app/Contents/Resources/package-manager/auto-setup.cmake'
      -DQT_QMAKE_EXECUTABLE:FILEPATH=$(QT_ARCH_DIR)/bin/qmake 
      -DCMAKE_PREFIX_PATH:PATH=$(QT_ARCH_DIR)
      -DCMAKE_C_COMPILER:FILEPATH=$(QT_TOOLS_CXX_DIR)/clang 
      -DCMAKE_CXX_COMPILER:FILEPATH=$(QT_TOOLS_CXX_DIR)/clang++
    workingDirectory: $(oxiBuildDir)
    displayName: Build CMake Cache

  - script: /opt/qt/Tools/CMake/CMake.app/Contents/bin/cmake --build $(oxiBuildDir) --target all
    workingDirectory: $(oxiBuildDir)
    displayName: Build

  - script: mkdir deploy && cp -r ./$(oxiOutputName).app ./deploy
    workingDirectory: $(oxiBuildDir)/apps/oxi_desktop

  - script: $(QT_ARCH_DIR)/bin/macdeployqt $(oxiOutputName).app -always-overwrite -dmg
    workingDirectory: $(oxiBuildDir)/apps/oxi_desktop/deploy
    displayName: Create Mac Deployable

  - script: mv $(oxiOutputName).dmg $(oxiOutputName)_MacOS.dmg
    workingDirectory: $(oxiBuildDir)/apps/oxi_desktop/deploy

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(oxiBuildDir)/apps/oxi_desktop/deploy'
      Contents: '$(oxiOutputName)_MacOS.dmg'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
    displayName: Copy Files to Staging Area

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)'
      ArtifactName: 'drop'
      publishLocation: 'Container'
    displayName: Publish Artifacts

- job: GitHub_Release
  pool:
    vmImage: windows-2019

  dependsOn:
    - Build_Deploy_Win_x64
    - Build_Deploy_MacOS

  steps:
  - checkout: none

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'drop'
      targetPath: '$(Pipeline.Workspace)'

  - task: GitHubRelease@1
    inputs:
      gitHubConnection: 'GitHub OXI-Desktop'
      repositoryName: 'OXI-Instruments/OXI-Desktop'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: 'gitTag'
      tagPattern: 'v*.*.*'
      title: 'OXI-Desktop $(Build.SourceBranchName)'
      releaseNotesSource: 'inline'
      releaseNotesInline: 'Build Pipeline $(Build.BuildNumber) based on $(Build.SourceVersion)'
      assets: '$(Pipeline.Workspace)/*'
      changeLogCompareToRelease: 'lastFullRelease'
      changeLogType: 'commitBased'
