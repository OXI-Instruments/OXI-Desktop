name: Build

on:
  push:
    branches: [ "main" ]
    tags: "v[0-9]+.[0-9]+.[0-9]+"
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

env:
  QT_VERSION: 5.15.2
  OXI_SOURCE_PATH: ${{ github.workspace }}
  OXI_BUILD_PATH: ${{ github.workspace }}/build
  OXI_OUTPUT_NAME: OXI-Desktop

  # Job has no access to env
  QT_ARCH_MAC_PATH: /opt/qt/$QT_VERSION/clang_64
  QT_TOOLS_CXX_MAC_PATH: /usr/bin

  QT_ARCH_WIN_PATH: C:/Qt/$env:QT_VERSION/mingw81_64
  QT_TOOLS_CXX_WIN_PATH: C:/Qt/Tools/mingw810_64/bin

  QT_ARCH_UBUNTU_PATH: /opt/qt/$QT_VERSION/clang_64
  QT_TOOLS_CXX_UBUNTU_PATH: /usr/bin

jobs:
  build-win:
    runs-on: windows-2019

    steps:
    - name: Install aqt
      run: |
        python -m pip install aqtinstall
    - name: Install Qt
      env:
        QT_HOST: windows
        QT_TARGET: desktop
        QT_ARCH: win64_mingw81
      run: |
        aqt list-qt ${{ env.QT_HOST }} ${{ env.QT_TARGET }}
        aqt list-qt ${{ env.QT_HOST }} ${{ env.QT_TARGET }} --arch ${{ env.QT_VERSION }}
        aqt install-qt --outputdir c:/Qt ${{ env.QT_HOST }} ${{ env.QT_TARGET }} ${{ env.QT_VERSION }} ${{ env.QT_ARCH }}
        aqt install-tool --outputdir c:/Qt ${{ env.QT_HOST }} ${{ env.QT_TARGET }} tools_cmake
        aqt install-tool --outputdir c:/Qt ${{ env.QT_HOST }} ${{ env.QT_TARGET }} tools_ninja
        aqt install-tool --outputdir c:/Qt ${{ env.QT_HOST }} ${{ env.QT_TARGET }} tools_mingw qt.tools.win64_mingw810
        aqt install-tool --outputdir c:/Qt ${{ env.QT_HOST }} ${{ env.QT_TARGET }} tools_qtcreator
        
    - name: Append PATH
      run: |
          "C:\Qt\Tools\mingw810_64\bin;C:\Qt\Tools\Ninja" >> $env:GITHUB_PATH
        
    - name: Checkout
      uses: actions/checkout@v3.3.0
      with:
        lfs: true
        submodules: recursive  

    - name: Create Build Directory
      run: |
        mkdir -p ${{ env.OXI_BUILD_PATH }}
    - name: Build CMake Cache
      run: >
        C:/Qt/Tools/CMake_64/bin/cmake.exe
        -S ${{ env.OXI_SOURCE_PATH }}
        -B ${{ env.OXI_BUILD_PATH }}
        "-DCMAKE_GENERATOR:STRING=Ninja"
        "-DCMAKE_BUILD_TYPE:STRING=Release"
        "-DCMAKE_PROJECT_INCLUDE_BEFORE:FILEPATH=C:/Qt/Tools/QtCreator/share/qtcreator/package-manager/auto-setup.cmake"
        "-DQT_QMAKE_EXECUTABLE:STRING=${{ env.QT_ARCH_WIN_PATH }}/bin/qmake.exe"
        "-DCMAKE_PREFIX_PATH:STRING=${{ env.QT_ARCH_WIN_PATH }}"
        "-DCMAKE_C_COMPILER:STRING=${{ env.QT_TOOLS_CXX_WIN_PATH }}/gcc.exe"
        "-DCMAKE_CXX_COMPILER:STRING=${{ env.QT_TOOLS_CXX_WIN_PATH }}/g++.exe"
    - name: Build
      run: |
        C:/Qt/Tools/CMake_64/bin/cmake.exe --build ${{ env.OXI_BUILD_PATH }} --target all

    - name: Create Deploy Directory
      run: |
        mkdir deploy
      working-directory: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop

    - name: Create windows deployable
      run: |
        cp ../*.exe .
        cp ../*.dll .
        Start-Process -Wait -FilePath "${{ env.QT_ARCH_WIN_PATH }}/bin/windeployqt.exe" -ArgumentList "--no-translations --compiler-runtime ${{ env.OXI_OUTPUT_NAME }}.exe"
      working-directory: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop/deploy

    - name: Upload Windows Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        path: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop/deploy/**
        name: OXI-Desktop_Win_x64

  build-mac-10-15:
    runs-on: macos-10.15 

    steps:        
    - name: Install aqt
      run: |
        python3 -m pip install aqtinstall
    
    - name: List aqt-tools for mac desktop
      run: |
        sudo aqt list-tool mac desktop
    - name: Install Qt
      run: |
        sudo aqt install-qt --outputdir /opt/qt mac desktop ${{ env.QT_VERSION }} clang_64 \
        && sudo aqt install-tool --outputdir /opt/qt mac desktop tools_cmake \
        && sudo aqt install-tool --outputdir /opt/qt mac desktop tools_ninja \
        && sudo aqt install-tool --outputdir /opt/qt mac desktop tools_qtcreator
        
    - name: Append PATH
      run: echo "/opt/qt/Tools/Ninja" >> $GITHUB_PATH

    - name: Checkout
      uses: actions/checkout@v3.3.0
      with:
        lfs: true
        submodules: recursive

    - name: Create Build Directory
      run: |
        mkdir -p ${{ env.OXI_BUILD_PATH }}
    - name: Build CMake Cache
      run: >
        /opt/qt/Tools/CMake/CMake.app/Contents/bin/cmake
        -S ${{ env.OXI_SOURCE_PATH }}
        -B ${{ env.OXI_BUILD_PATH }}
        -DCMAKE_GENERATOR:STRING=Ninja
        -DCMAKE_BUILD_TYPE:STRING=Release
        '-DCMAKE_PROJECT_INCLUDE_BEFORE:FILEPATH=/opt/qt/Qt Creator.app/Contents/Resources/package-manager/auto-setup.cmake'
        -DQT_QMAKE_EXECUTABLE:FILEPATH=${{ env.QT_ARCH_MAC_PATH }}/bin/qmake
        -DCMAKE_PREFIX_PATH:PATH=${{ env.QT_ARCH_MAC_PATH }}
        -DCMAKE_C_COMPILER:FILEPATH=${{ env.QT_TOOLS_CXX_MAC_PATH }}/clang
        -DCMAKE_CXX_COMPILER:FILEPATH=${{ env.QT_TOOLS_CXX_MAC_PATH }}/clang++
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Build
      run: |
        /opt/qt/Tools/CMake/CMake.app/Contents/bin/cmake --build ${{ env.OXI_BUILD_PATH }} --target all
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Move to Deploy Staging
      run: |
        mkdir deploy && cp -r ./${{ env.OXI_OUTPUT_NAME }}.app ./deploy
      working-directory: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop

    - name: Create mac deployable
      run: |
        ${{ env.QT_ARCH_MAC_PATH }}/bin/macdeployqt ${{ env.OXI_OUTPUT_NAME }}.app -always-overwrite -dmg
      working-directory: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop/deploy

    - name: Set Version for Packaging
      run: |
        echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

    - name: Rename artifact
      run: |
        mv ${{ env.OXI_OUTPUT_NAME }}.dmg ${{ env.OXI_OUTPUT_NAME }}-${{ env.VERSION }}-MacOS-1015.dmg
      working-directory: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop/deploy

    - name: Upload Mac Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        path: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop/deploy/${{ env.OXI_OUTPUT_NAME }}-${{ env.VERSION }}-MacOS-1015.dmg
        name: OXI-Desktop_MacOS-10.15

  build-mac-11:
    runs-on: macos-11

    steps:        
    - name: Install aqt
      run: |
        python3 -m pip install aqtinstall
    
    - name: List aqt-tools for mac desktop
      run: |
        sudo aqt list-tool mac desktop
    - name: Install Qt
      run: |
        sudo aqt install-qt --outputdir /opt/qt mac desktop ${{ env.QT_VERSION }} clang_64 \
        && sudo aqt install-tool --outputdir /opt/qt mac desktop tools_cmake \
        && sudo aqt install-tool --outputdir /opt/qt mac desktop tools_ninja \
        && sudo aqt install-tool --outputdir /opt/qt mac desktop tools_qtcreator
        
    - name: Append PATH
      run: echo "/opt/qt/Tools/Ninja" >> $GITHUB_PATH

    - name: Checkout
      uses: actions/checkout@v3.3.0
      with:
        lfs: true
        submodules: recursive

    - name: Create Build Directory
      run: |
        mkdir -p ${{ env.OXI_BUILD_PATH }}
    - name: Build CMake Cache
      run: >
        /opt/qt/Tools/CMake/CMake.app/Contents/bin/cmake
        -S ${{ env.OXI_SOURCE_PATH }}
        -B ${{ env.OXI_BUILD_PATH }}
        -DCMAKE_GENERATOR:STRING=Ninja
        -DCMAKE_BUILD_TYPE:STRING=Release
        '-DCMAKE_PROJECT_INCLUDE_BEFORE:FILEPATH=/opt/qt/Qt Creator.app/Contents/Resources/package-manager/auto-setup.cmake'
        -DQT_QMAKE_EXECUTABLE:FILEPATH=${{ env.QT_ARCH_MAC_PATH }}/bin/qmake
        -DCMAKE_PREFIX_PATH:PATH=${{ env.QT_ARCH_MAC_PATH }}
        -DCMAKE_C_COMPILER:FILEPATH=${{ env.QT_TOOLS_CXX_MAC_PATH }}/clang
        -DCMAKE_CXX_COMPILER:FILEPATH=${{ env.QT_TOOLS_CXX_MAC_PATH }}/clang++
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Build
      run: |
        /opt/qt/Tools/CMake/CMake.app/Contents/bin/cmake --build ${{ env.OXI_BUILD_PATH }} --target all
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Move to Deploy Staging
      run: |
        mkdir deploy && cp -r ./${{ env.OXI_OUTPUT_NAME }}.app ./deploy
      working-directory: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop

    - name: Create mac deployable
      run: |
        ${{ env.QT_ARCH_MAC_PATH }}/bin/macdeployqt ${{ env.OXI_OUTPUT_NAME }}.app -always-overwrite -dmg
      working-directory: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop/deploy

    - name: Set Version for Packaging
      run: |
        echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

    - name: Rename artifact
      run: |
        mv ${{ env.OXI_OUTPUT_NAME }}.dmg ${{ env.OXI_OUTPUT_NAME }}-${{ env.VERSION }}-MacOS-11.dmg
      working-directory: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop/deploy

    - name: Upload Mac Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        path: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop/deploy/${{ env.OXI_OUTPUT_NAME }}-${{ env.VERSION }}-MacOS-11.dmg
        name: OXI-Desktop_MacOS-11

  build-mac-12:
    runs-on: macos-12

    steps:        
    - name: Install aqt
      run: |
        python3 -m pip install aqtinstall
    
    - name: List aqt-tools for mac desktop
      run: |
        sudo aqt list-tool mac desktop
    - name: Install Qt
      run: |
        sudo aqt install-qt --outputdir /opt/qt mac desktop ${{ env.QT_VERSION }} clang_64 \
        && sudo aqt install-tool --outputdir /opt/qt mac desktop tools_cmake \
        && sudo aqt install-tool --outputdir /opt/qt mac desktop tools_ninja \
        && sudo aqt install-tool --outputdir /opt/qt mac desktop tools_qtcreator
        
    - name: Append PATH
      run: echo "/opt/qt/Tools/Ninja" >> $GITHUB_PATH

    - name: Checkout
      uses: actions/checkout@v3.3.0
      with:
        lfs: true
        submodules: recursive

    - name: Create Build Directory
      run: |
        mkdir -p ${{ env.OXI_BUILD_PATH }}
    - name: Build CMake Cache
      run: >
        /opt/qt/Tools/CMake/CMake.app/Contents/bin/cmake
        -S ${{ env.OXI_SOURCE_PATH }}
        -B ${{ env.OXI_BUILD_PATH }}
        -DCMAKE_GENERATOR:STRING=Ninja
        -DCMAKE_BUILD_TYPE:STRING=Release
        '-DCMAKE_PROJECT_INCLUDE_BEFORE:FILEPATH=/opt/qt/Qt Creator.app/Contents/Resources/package-manager/auto-setup.cmake'
        -DQT_QMAKE_EXECUTABLE:FILEPATH=${{ env.QT_ARCH_MAC_PATH }}/bin/qmake
        -DCMAKE_PREFIX_PATH:PATH=${{ env.QT_ARCH_MAC_PATH }}
        -DCMAKE_C_COMPILER:FILEPATH=${{ env.QT_TOOLS_CXX_MAC_PATH }}/clang
        -DCMAKE_CXX_COMPILER:FILEPATH=${{ env.QT_TOOLS_CXX_MAC_PATH }}/clang++
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Build
      run: |
        /opt/qt/Tools/CMake/CMake.app/Contents/bin/cmake --build ${{ env.OXI_BUILD_PATH }} --target all
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Move to Deploy Staging
      run: |
        mkdir deploy && cp -r ./${{ env.OXI_OUTPUT_NAME }}.app ./deploy
      working-directory: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop

    - name: Create mac deployable
      run: |
        ${{ env.QT_ARCH_MAC_PATH }}/bin/macdeployqt ${{ env.OXI_OUTPUT_NAME }}.app -always-overwrite -dmg
      working-directory: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop/deploy

    - name: Set Version for Packaging
      run: |
        echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

    - name: Rename artifact
      run: |
        mv ${{ env.OXI_OUTPUT_NAME }}.dmg ${{ env.OXI_OUTPUT_NAME }}-${{ env.VERSION }}-MacOS-12.dmg
      working-directory: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop/deploy

    - name: Upload Mac Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        path: ${{ env.OXI_BUILD_PATH }}/apps/oxi_desktop/deploy/${{ env.OXI_OUTPUT_NAME }}-${{ env.VERSION }}-MacOS-12.dmg
        name: OXI-Desktop_MacOS-12

  build-linux:
    runs-on: ubuntu-22.04
    steps:
    - name: Install Libraries
      run: |
        sudo apt-get update -y && \
        sudo apt-get install -y \
        git \
        cmake \
        curl \
        file \
        pkg-config \
        python3 \
        python3-pip \
        build-essential \
        libdbus-1-3 \
        libpulse-mainloop-glib0 \
        libjack-dev \
        libasound2-dev \
        libgl1-mesa-dev \
        libfreetype6-dev \
        libfontconfig1 \
        libxkbcommon-dev \
        ninja-build \
        patchelf \
        qtbase5-dev \
        qtbase5-dev-tools \
        qtcreator \
        libfuse2
        
    - name: Checkout
      uses: actions/checkout@v3.3.0
      with:
        lfs: true
        submodules: recursive

    - name: Create Build Directory
      run: |
        mkdir -p ${{ env.OXI_BUILD_PATH }}
        
    - name: Make CMake Cache
      run: >
        cmake
        -S ${{ env.OXI_SOURCE_PATH }}
        -B ${{ env.OXI_BUILD_PATH }}
        -DCMAKE_GENERATOR:STRING=Ninja 
        -DCMAKE_BUILD_TYPE:STRING=Release 
        -DCMAKE_PROJECT_INCLUDE_BEFORE:FILEPATH=/usr/share/qtcreator/package-manager/auto-setup.cmake
        -DQT_QMAKE_EXECUTABLE:FILEPATH=${{ env.QT_ARCH_UBUNTU_PATH }}/usr/bin/qmake
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Build for Linux
      run: |
        cmake --build ${{ env.OXI_BUILD_PATH }} --target all
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Create deploy directory
      run: |
        mkdir -p ${{ github.workspace }}/deploy
  
    - name: Download AppImage packaging tools
      run: |
        curl -LO https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        curl -LO https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod 0755 linuxdeploy-*.AppImage
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Set Version for Packaging
      run: |
        echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV

    - name: Create Linux AppImage
      run: >
        ./linuxdeploy-x86_64.AppImage
        --appdir ${{ github.workspace }}/deploy
        --plugin qt
        --output appimage
        --icon-file=${{ github.workspace }}/apps/oxi_desktop/resources/icon-256.png
        --desktop-file=${{ github.workspace }}/apps/oxi_desktop/resources/oxi_desktop.desktop
        --executable=apps/oxi_desktop/${{ env.OXI_OUTPUT_NAME }}
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Rename artifact
    # the appimage creation replaces dash with underscore
      run: mv OXI_Desktop-${{ env.VERSION }}-x86_64.AppImage OXI-Desktop-${{ env.VERSION }}-x86_64.AppImage
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Upload Linux Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
        path: ${{ env.OXI_BUILD_PATH }}/OXI-Desktop-${{ env.VERSION }}-x86_64.AppImage
        name: OXI-Desktop_Linux

  test-linux:
    runs-on: ubuntu-22.04
    steps:
    - name: Install Libraries
      run: |
        sudo apt-get update -y && \
        sudo apt-get install -y \
        git \
        cmake \
        curl \
        file \
        pkg-config \
        python3 \
        python3-pip \
        build-essential \
        libdbus-1-3 \
        libpulse-mainloop-glib0 \
        libjack-dev \
        libasound2-dev \
        libgl1-mesa-dev \
        libfreetype6-dev \
        libfontconfig1 \
        libxkbcommon-dev \
        ninja-build \
        patchelf \
        qtbase5-dev \
        qtbase5-dev-tools \
        qtcreator \
        libfuse2
        
    - name: Checkout
      uses: actions/checkout@v3.3.0
      with:
        lfs: true
        submodules: recursive

    - name: Create Build Directory
      run: |
        mkdir -p ${{ env.OXI_BUILD_PATH }}
        
    - name: Make CMake Cache
      run: >
        cmake
        -S ${{ env.OXI_SOURCE_PATH }}
        -B ${{ env.OXI_BUILD_PATH }}
        -DCMAKE_GENERATOR:STRING=Ninja 
        -DCMAKE_BUILD_TYPE:STRING=Release 
        -DCMAKE_PROJECT_INCLUDE_BEFORE:FILEPATH=/usr/share/qtcreator/package-manager/auto-setup.cmake
        -DQT_QMAKE_EXECUTABLE:FILEPATH=${{ env.QT_ARCH_UBUNTU_PATH }}/usr/bin/qmake
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Build for Linux
      run: |
        cmake --build ${{ env.OXI_BUILD_PATH }} --target all
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Run Tests
      run: |
        ./tests/unittests/oxi_unittests --gtest_filter=unit* --gtest_output=xml:test_report.xml
      working-directory: ${{ env.OXI_BUILD_PATH }}

    - name: Upload Test Report
      uses: actions/upload-artifact@v3.1.2
      if: always()
      with:
        name: test-results
        path: ./**/test_report.xml


  create-release:
    # if: startsWith(github.ref, 'refs/tags/v')
    needs: [build-win, build-mac-10-15, build-mac-11, build-mac-12, build-linux, test-linux]
    runs-on: ubuntu-22.04

    steps:
      - name: Download Linux Build Artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: OXI-Desktop_Linux
          path: artifact_linux

      - name: Download Mac 10.15 Build Artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: OXI-Desktop_MacOS-10.15
          path: artifact_mac_1015

      - name: Download Mac 11 Build Artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: OXI-Desktop_MacOS-11
          path: artifact_mac_11

      - name: Download Mac 12 Build Artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: OXI-Desktop_MacOS-12
          path: artifact_mac_12

      - name: Download Win Build Artifact
        uses: actions/download-artifact@v2.1.1
        with:
          name: OXI-Desktop_Win_x64
          path: artifact_win

      - name: Install zip
        run: sudo apt-get install zip

      - name: Compress win artifacts
        run: zip -r ${{ env.OXI_OUTPUT_NAME }}-${{ github.ref_name }}-Win_x64.zip ./artifact_win/*

      - name: List Files
        run: ls -R
    
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            ./artifact_linux/**
            ./artifact_mac_1015/**
            ./artifact_mac_11/**
            ./artifact_mac_12/**
            ${{ env.OXI_OUTPUT_NAME }}-${{ github.ref_name }}-Win_x64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
